--- 
layout: post
title: "The Rules of Unix"
date: 2004-01-08
author: Jeffrey Veen
featured: yes
abstract: The fundamentals of the one of the oldest operating systems hold true today
---

Last Fall, Eric Raymond published "<a href="http://www.amazon.com/exec/obidos/tg/detail/-/0131429019/hotwiredstyle">The Art of Unix Programming</a>" -- a book I'm going to have to buy, since it's 500 pages are just too much for the screen. In the first chapter, he lists the rules that make up the Unix philosophy, and reading through them, I was struck by their application to what I do -- IA, UX, design, et al.

Rule 10 is interaction design. Rule 14 is why we use <a href="http://smarty.php.net/">templates</a> to spit out HTML. Rule 4 is how CSS works. Rule 13 is my <a href="http://adaptivepath.com/publications/essays/archives/000279.php">resolution for this year</a>, restated. Rule 16 is why we started <a href="http://adaptivepath.com/">this</a> company.

> 1. Rule of Modularity: Write simple parts connected by clean interfaces.
> 2. Rule of Clarity: Clarity is better than cleverness.
> 3. Rule of Composition: Design programs to be connected to other programs.
> 4. Rule of Separation: Separate policy from mechanism; separate interfaces from engines.
> 5. Rule of Simplicity: Design for simplicity; add complexity only where you must.
> 6. Rule of Parsimony: Write a big program only when it is clear by demonstration that nothing else will do.
> 7. Rule of Transparency: Design for visibility to make inspection a nd debugging easier.
> 8. Rule of Robustness: Robustness is the child of transparency and simplicity.
> 9. Rule of Representation: Fold knowledge into data so program logic can be stupid and robust.
> 10. Rule of Least Surprise: In interface design, always do the least surprising thing.
> 11. Rule of Silence: When a program has nothing surprising to say, it should say nothing.
> 12. Rule of Repair: When you must fail, fail noisily and as soon as possible.
> 13. Rule of Economy: Programmer time is expensive; conserve it in preference to machine time.
> 14. Rule of Generation: Avoid hand-hacking; write programs to write programs when you can.
> 15. Rule of Optimization: Prototype before polishing. Get it working before you optimize it.
> 16. Rule of Diversity: Distrust all claims for "one true way".
> 17. Rule of Extensibility: Design for the future, because it will be here sooner than you think.

He elaborates on them <a href="http://www.faqs.org/docs/artu/ch01s06.html">in the rest of the chapter</a>. The whole book is <a href=""">here</a>.
